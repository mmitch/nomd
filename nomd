#!/usr/bin/env bash
#
# Copyright (C) 2017, 2018  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of nomd.
#
# nomd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nomd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nomd.  If not, see <http://www.gnu.org/licenses/>.
#

set -e

if [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
    echo "nomd needs at least bash 4, your version is $BASH_VERSION"
    exit 1
fi

# dependency information
##SHELLDEP cat
##SHELLDEP grep
##SHELLDEP mktemp
##SHELLDEP rm

# set up temporary directory
NOMD_TEMP_DIR="$(mktemp -d -t nomd.XXXXXXXX)"
NOMD_CHECK_RESULTS="$NOMD_TEMP_DIR/check_results"
NOMD_CHECK_STDERR="$NOMD_TEMP_DIR/check_errors"
NOMD_NOTIFY_STDERR="$NOMD_TEMP_DIR/notify_errors"

# clean up on exit
on_exit_or_error()
{
    # reprint captured errors on stderr
    if [ -s "$NOMD_CHECK_STDERR" ]; then
	cat "$NOMD_CHECK_STDERR" >&2
    fi
    if [ -s "$NOMD_NOTIFY_STDERR" ]; then
	cat "$NOMD_NOTIFY_STDERR" >&2
    fi
    
    # autoclean temporary directory
    rm -r "$NOMD_TEMP_DIR"
}
trap on_exit_or_error EXIT

# run checks
(
    for CHECK in check/*.check ; do
	# shellcheck source=/dev/null
	source "$CHECK"
    done
    for TOOL in tool/*.tool ; do
	# shellcheck source=/dev/null
	source "$TOOL"
    done
    if [ -e check.local ]; then
	# shellcheck source=/dev/null
	source check.local
    else
	echo 'I:nomd_checks:no check.local found, using check.default instead'
	source check.default
    fi
) 3>&1 > "$NOMD_CHECK_RESULTS" 2> "$NOMD_CHECK_STDERR" 

# append meta errors from checks
while read -r LINE; do
    echo "C:nomd_checks:$LINE"
done < "$NOMD_CHECK_STDERR" >> "$NOMD_CHECK_RESULTS"

# prepare some variables
NOMD_CRIT_COUNT=$(grep -c ^C "$NOMD_CHECK_RESULTS" || true)
NOMD_WARN_COUNT=$(grep -c ^W "$NOMD_CHECK_RESULTS" || true)
NOMD_INFO_COUNT=$(grep -c ^I "$NOMD_CHECK_RESULTS" || true)
if [ "$NOMD_CRIT_COUNT" -gt 0 ]; then
    NOMD_HIGHEST_SEVERITY=C
elif [ "$NOMD_WARN_COUNT" -gt 0 ]; then
    NOMD_HIGHEST_SEVERITY=W
elif [ "$NOMD_INFO_COUNT" -gt 0 ]; then
    NOMD_HIGHEST_SEVERITY=I
else
    # shellcheck disable=SC2034
    NOMD_HIGHEST_SEVERITY='?'
fi

# run notifications
(
    for NOTIFY in notify/*.notify; do
	# shellcheck source=/dev/null
	source "$NOTIFY"
    done
    if [ -e notify.local ]; then
	# shellcheck source=/dev/null
	source notify.local
    else
	echo 'I:nomd_notify:no notify.local found, using notify.default instead' >> "$NOMD_CHECK_RESULTS"
	source notify.default
    fi
) 2> "$NOMD_NOTIFY_STDERR"
