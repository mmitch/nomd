#!/usr/bin/env bash
#
# Copyright (C) 2017, 2018  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of nomd.
#
# nomd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nomd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nomd.  If not, see <http://www.gnu.org/licenses/>.
#

##SHELLDEP cat
##SHELLDEP grep
##SHELLDEP rm
##SHELLDEP timeout

check_tcp_connect()
##CHECKDSC check for open tcp port (attempt connection)
#
##PARMNAME $1
##PARMDESC host to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 9 (discard)
{
    # receive parameters and set defaults
    local HOST="${1:-localhost}"
    local PORT="${2:-9}" 

    # check
    if :<"/dev/tcp/$HOST/$PORT"; then
	echo "I:tcp_connect:connect on $HOST:$PORT"
    else
	echo "C:tcp_connect:no connect on $HOST:$PORT"
    fi 2>/dev/null
}

check_tcp_banner()
##CHECKDSC check initial data on tcp connection
#
##PARMNAME $1
##PARMDESC host to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 25 (smtp)
#
##PARMNAME $3
##PARMDESC regexp of expected content
##PARMDFLT ^220 (SMTP response code on succesful connect)
#
##PARAMNAME stdin
##PARAMDESC commands to send to connection if it can be established
##PARAMDFLT none
{
    # receive parameters and set defaults
    local HOST="${1:-localhost}"
    local PORT="${2:-25}"
    local EXPECTED_RE="${3:-^220}"

    # check tcp banner
    {
	if [ -t 0 ]; then
	    # stdin is terminal, so no stdin given
	    # -> provide empty stdin, otherwise we will wait for terminal input...
	    exec 0</dev/null
	fi

	# do the TCP connect, this directly checks for connect errors
	if exec 2>/dev/null 5<>"/dev/tcp/$HOST/$PORT"; then

	    # send stdin to remote port
	    cat - >&5

	    # receive and check response
	    if timeout 3 cat 2>/dev/null <&5 | grep -q -E "$EXPECTED_RE"; then
		echo "I:tcp_banner:content ok on $HOST:$PORT ($EXPECTED_RE)"
	    else
		echo "C:tcp_banner:expected banner not found at $HOST:$PORT ($EXPECTED_RE)"
	    fi

	else
	    echo "C:tcp_banner:no connect on $HOST:$PORT ($EXPECTED_RE)"
	fi
    }
}
