#!/bin/bash
#
# Copyright (C) 2017  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of nomd.
#
# nomd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nomd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nomd.  If not, see <http://www.gnu.org/licenses/>.
#

##SHELLDEP cat
##SHELLDEP grep
##SHELLDEP rm
##SHELLDEP timeout

check_tcp_connect()
##CHECKDSC check for open tcp port (attempt connection)
#
##PARMNAME $1
##PARMDESC host to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 9 (discard)
{
    # receive parameters and set defaults
    local HOST="${1:-localhost}"
    local PORT="${2:-9}" 

    # check
    if </dev/tcp/$HOST/$PORT; then
	echo "I:tcp_connect:connect on $HOST:$PORT"
    else
	echo "C:tcp_connect:no connect on $HOST:$PORT"
    fi 2>/dev/null
}

check_tcp_banner()
##CHECKDSC check initial data on tcp connection
#
##PARMNAME $1
##PARMDESC host to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 25 (smtp)
#
##PARMNAME $3
##PARMDESC regexp of expected content
##PARMDFLT ^220 (SMTP response code on succesful connect)
{
    # receive parameters and set defaults
    local HOST="${1:-localhost}"
    local PORT="${2:-25}"
    local EXPECTED_RE="${3:-^220}" 

    # this needs timeout
    # the trick is that the redirections are processed in order:
    # $TEMPFILE is only created if the TCP connect was successful
    local TEMPFILE="$NOMD_TEMP_DIR/check_tcp_banner"
    timeout 3 cat 2>/dev/null </dev/tcp/$HOST/$PORT >"$TEMPFILE" || true
    if [ -e "$TEMPFILE" ]; then
	if grep -q -E "$EXPECTED_RE" "$TEMPFILE"; then
	    echo "I:tcp_banner:content ok on $HOST:$PORT ($EXPECTED_RE)"
	else
	    echo "C:tcp_banner:expected banner not found at $HOST:$PORT ($EXPECTED_RE)"
	fi
	rm "$TEMPFILE"
    else
	echo "C:tcp_banner:no connect on $HOST:$PORT ($EXPECTED_RE)"
    fi
}
