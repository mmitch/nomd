#!/usr/bin/env bash
#
# Copyright (C) 2017, 2018  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of nomd.
#
# nomd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nomd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nomd.  If not, see <http://www.gnu.org/licenses/>.
#

##SHELLDEP openssl
##SHELLDEP date
##SHELLDEP true

check_sslcert_file()
##CHECKDSC check for expiring ssl certificates in local files
#
##PARMNAME $*
##PARMDESC file(s) to check (supports non-quoted shell wildcards in call)
##PARMDFLT /etc/ssl/certs/ssl-cert-snakeoil.pem
{
    # set defaults
    if [ -z "$*" ]; then
	set -- /etc/ssl/certs/ssl-cert-snakeoil.pem
    fi

    # check files
    for FILE in "$@"; do
	if [ -e "$FILE" ]; then
	    _check_cert_validity 'sslcert_file' "file $FILE" < "$FILE"
	else
	    echo "C:sslcert_file:missing file $FILE"
	fi
    done
}

check_sslcert_tcp()
##CHECKDSC check for expiring ssl certificates via tcp connect to ssl enabled service
##CHECKDSC note: use check_sslcert_https() for https checks with virtual hosts
#
##PARMNAME $1
##PARMDESC host to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 443
{
    # receive parameters and set defaults
    local HOST=${1:-localhost}
    local PORT=${2:-443}

    # check ssl service
    true | openssl s_client -connect "$HOST:$PORT" 2>/dev/null | _check_cert_validity 'sslcert_tcp' "$HOST:$PORT"
}

check_sslcert_https()
##CHECKDSC check for expiring ssl certificates via https connect to ssl enabled webserver
#
##PARMNAME $1
##PARMDESC hostname to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 443
{
    # receive parameters and set defaults
    local HOST=${1:-localhost}
    local PORT=${2:-443}

    # check ssl service
    true | openssl s_client -connect "$HOST:$PORT" -servername "$HOST" 2>/dev/null | _check_cert_validity 'sslcert_https' "$HOST:$PORT"
}

check_sslcert_starttls()
##CHECKDSC check for expiring ssl certificates via tcp connect to STARTTLS enabled service
#
##PARMNAME $1
##PARMDESC hostname to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 25
#
##PARMNAME $3
##PARMDESC protocol to use with openssl -starttls
##PARMDFLT smtp
#
##PARAMNAME stdin
##PARAMDESC commands to send to connection if it can be established
##PARAMDFLT none
{
    # receive parameters and set defaults
    local HOST=${1:-localhost}
    local PORT=${2:-25}
    local PROTO=${3:-smtp}

    # check ssl service
    {
        if [ -t 0 ]; then
            # stdin is terminal, this will hang, so redirect to empty input
            exec <<<''
        fi

        # check ssl service
        openssl s_client -connect "$HOST:$PORT" -starttls "$PROTO" 2>/dev/null | _check_cert_validity 'sslcert_starttls' "$HOST:$PORT:$PROTO"
    }
}

_CHECK_CERT_NOWSECS=$(date +%s)

_check_cert_validity()
{
    local CHECK_NAME=$1 CHECK_OBJECT="$2"

    local ENDDATE ENDSECS
    ENDDATE="$(LANG=C openssl x509 -enddate -noout -in /dev/stdin  | cut -f 2 -d =)"
    ENDSECS="$(date --date "$ENDDATE" +%s)"
    local SECONDS_LEFT=$(( ENDSECS - _CHECK_CERT_NOWSECS ))
    local DAYS_LEFT=$(( SECONDS_LEFT / ( 60 * 60 * 24 ) ))

    local SEVERITY=I
    if [ $DAYS_LEFT -le 7 ]; then
	SEVERITY=C
    elif [ $DAYS_LEFT -le 45 ]; then
	SEVERITY=W
    fi

    echo "$SEVERITY:$CHECK_NAME:$DAYS_LEFT days left on $CHECK_OBJECT"
}

check_ssl_hostname_starttls()
##CHECKDSK check certificate chain and common names via starttls connection
#
##PARMNAME $1
##PARMDESC hostname to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 25
#
##PARMNAME $3
##PARMDESC protocol to use with openssl -starttls
##PARMDFLT smtp
#
##PARAMNAME stdin
##PARAMDESC commands to send to connection if it can be established
##PARAMDFLT none
{
    # receive parameters and set defaults
    local HOST=${1:-localhost}
    local PORT=${2:-25}
    local PROTO=${3:-smtp}

    # check ssl service
    {
	if [ -t 0 ]; then
	    # stdin is terminal, so no stdin given
	    # -> provide empty stdin, otherwise we will wait for terminal input...
	    exec 0</dev/null
	fi

	local STDERR ERROR
	if STDERR=$(openssl s_client -verify_return_error -verify_hostname "$HOST" -starttls "$PROTO" -connect "$HOST":"$PORT" 2>&1 1>/dev/null); then
	    echo "I:ssl_hostname_starttls:check ok on $HOST:$PORT:$PROTO"
	else
	    ERROR=$(sed -n -e '/error/,1{p;q}' <<< "$STDERR")
	    echo "C:ssl_hostname_starttls:error on $HOST:$PORT:$PROTO: $ERROR"
	fi
    }
}

check_ssl_hostname()
##CHECKDSK check certificate chain and common names via ssl connection
#
##PARMNAME $1
##PARMDESC hostname to connect to
##PARMDFLT localhost
#
##PARMNAME $2
##PARMDESC port to connect to
##PARMDFLT 443
#
##PARAMNAME stdin
##PARAMDESC commands to send to connection if it can be established
##PARAMDFLT none
{
    # receive parameters and set defaults
    local HOST=${1:-localhost}
    local PORT=${2:-443}

    # check ssl service
    {
	if [ -t 0 ]; then
	    # stdin is terminal, so no stdin given
	    # -> provide empty stdin, otherwise we will wait for terminal input...
	    exec 0</dev/null
	fi

	local STDERR ERROR
	if STDERR=$(openssl s_client -verify_return_error -verify_hostname "$HOST" -connect "$HOST":"$PORT" 2>&1 1>/dev/null); then
	    echo "I:ssl_hostname:check ok on $HOST:$PORT"
	else
	    ERROR=$(sed -n -e '/error/,1{p;q}' <<< "$STDERR")
	    echo "C:ssl_hostname:error on $HOST:$PORT: $ERROR"
	fi
    }
}
