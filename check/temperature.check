#!/usr/bin/env bash
#
# Copyright (C) 2021  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of nomd.
#
# nomd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nomd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nomd.  If not, see <http://www.gnu.org/licenses/>.
#

##SHELLDEP sensors
##SHELLDEP jq

check_temperature_disks()
##CHECKDSC check disk temperatures (drivetemp-* and nvme-* from sensors(1))
#
##PARMNAME $1
##PARMDESC minimum warning temperature in °C
##PARMDFLT 38
#
##PARMNAME $2
##PARMDESC minimum critical temperature in °C
##PARMDFLT 42
{
    # receive parameters
    local temp_warn="${1:-38}"
    local temp_crit="${2:-42}"

    # check temperatures
    sensors -j | jq --raw-output --stream '
# in streaming mode, all objects are streamed as [[path], value] elements, with path having multiple parts
def get_path:  .[0] ;
def get_value: .[1] ;

# extract information from stream elements
def get_sensor_name:    get_path  | .[0]  ; # first path element
def get_sensor_reading: get_path  | .[2]  ; # third path element
def get_temperature:    get_value | round ;

# select only those stream elements which contain the temperatures
select( get_sensor_name | test("^(drivetemp|nvme)-") )
| select( get_sensor_reading == "temp1_input" )
| select( get_value | numbers )

# combine each sensor name with their temperature
| [ get_sensor_name, get_temperature ]

# combine name/temp pairs to space separated strings
| join(" ")
	' | {
	found=no

	while read -r drive temp; do
            local severity
            if [ "$temp" -ge "$temp_crit" ]; then
		severity=C
            elif [ "$temp" -ge "$temp_warn" ]; then
		severity=W
	    elif [ "$temp" -eq 0 ]; then
		severity=W
            else
		severity=I
            fi
            echo "$severity:temperature_disks:drive $drive has $temp°C"
	    found=yes
	done

	if [ "$found" = no ]; then
	    echo "W:temperature_disks:no drives found"
	fi
    }
}
