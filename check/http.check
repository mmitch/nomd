#!/bin/bash
#
# Copyright (C) 2017  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v3 or later.
#
# This file is part of nomd.
#
# nomd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nomd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nomd.  If not, see <http://www.gnu.org/licenses/>.
#

##SHELLDEP wget curl GET
##SHELLDEP wget curl HEAD
##SHELLDEP grep
##SHELLDEP which

check_http_status()
##CHECKDSC check HTTP status code
#
##PARMNAME $1
##PARMDESC URL to connect to
##PARMDFLT http://www.example.com/
#
##PARMNAME $2
##PARMDESC expected HTTP status code
##PARMDFLT 200
{
    [ $CHECK_HTTP_TOOLSET ] || _determine_http_toolset

    # receive parameters and set defaults
    local URL="${1:-http://www.example.com/}"
    local EXPECTED_STATUS="${2:-200}" 

    # get status
    local STATUS=$(_get_http_status "$URL")
    if [ "$STATUS" != "$EXPECTED_STATUS" ]; then
	echo "C:http_status:$STATUS != $EXPECTED_STATUS on $URL"
    else
	echo "I:http_status:$STATUS as expected on $URL"
    fi
}

check_http_content()
##CHECKDSC check HTTP response content
#
##PARMNAME $1
##PARMDESC URL to connect to
##PARMDFLT http://www.example.com/
#
##PARMNAME $2
##PARMDESC regexp of expected content
##PARMDFLT Example Domain
{
    [ $CHECK_HTTP_TOOLSET ] || _determine_http_toolset

    # receive parameters and set defaults
    local URL="${1:-http://www.example.com/}"
    local EXPECTED_RE="${2:-Example Domain}" 

    # get and check content
    if _get_http_content "$URL" | grep -q -E "$EXPECTED_RE"; then
	echo "I:http_content:content ok on $URL ($EXPECTED_RE)"
    else
	echo "C:http_content:expected content not found in $URL: $EXPECTED_RE"
    fi
}

# cache selcted toolset in $CHECK_HTTP_TOOLSET
_determine_http_toolset()
{
    if which wget >/dev/null; then
	CHECK_HTTP_TOOLSET=wget
    elif which curl >/dev/null; then
	CHECK_HTTP_TOOLSET=curl
    elif which HEAD GET >/dev/null; then
	CHECK_HTTP_TOOLSET=lwp
    fi

    if [ $CHECK_HTTP_TOOLSET ]; then
	echo "I:http:toolset $CHECK_HTTP_TOOLSET selected"
    else
	echo 'C:http:no suitable toolset found (wget/curl/LWP)'
    fi
}

_get_http_status()
{
    local URL="$1"

    case $CHECK_HTTP_TOOLSET in
	wget)
	    local STATUS DUMMY
	    read DUMMY STATUS DUMMY <<< $(wget --server-response --spider example.com 2>&1 | grep '^  HTTP')
	    echo $STATUS
	;;

	curl)
	    curl -o /dev/null --silent --head --write-out '%{http_code}\n' "$URL"
	    ;;
	
	lwp)
	    local STATUS DUMMY
	    read STATUS DUMMY <<< $(HEAD "$URL")
	    echo $STATUS
	    ;;
    esac
}

_get_http_content()
{
    local URL="$1"

    case $CHECK_HTTP_TOOLSET in
	wget)
	    wget -q -O- "$URL"
	;;

	curl)
	    curl -o- --silent "$URL"
	    ;;
	
	lwp)
	    GET "$URL"
	    ;;
    esac
}
