* nomd

Generally, nomd is a simple nomitoring distribution.
Specifically, nomd is no omd.

** project status-o-meter

- [ ] I actually know of one other user
- [ ] might be usable for somebody else
- [ ] detected a real-world problem
- [ ] works for me on at least three machines
- [ ] basic features implemented
- [X] a wild first code appears!
- [X] some vague ideas and rumors

** feature fahrplan

- [-] [2/9] plugin architecture for checks
  - [X] load
  - [ ] diskfree
    - ?? configure by stdin
  - [ ] memfree
  - [ ] tcp connect
  - [ ] tcp connect with content check
  - [ ] http response code
  - [ ] http content check
  - [X] apt available updates
  - [ ] ?? check_mk wrapper
- [-] [2/5] plugin architecture for notifications
  - [ ] mail
  - [ ] [[https://github.com/mmitch/mitchscripts/blob/master/bash/notify.sh][my notification framework]]
  - [ ] pushbullet
  - [X] dbus/notify-send
  - [X] terminal output
- [X] main configuration file is plain bash and is simply run
- [X] provide default configuration, use local configuration instead if available
- [ ] pass all nomd commandline arguments to checkers and notifications
  - maximum flexibility in local scripts
- [ ] convenience variables for notifications
  - count of all severities, highest severity
- [ ] wrappers for scripts in other languages
- [ ] support local configuration with git branches
- [ ] add copyright notices, project homepage and other boring stuff
- [ ] dependency handling
  - document dependencies per helper
  - global fetch and display
- [ ] generate documentation
  - describe methods and parameters per helper
  - global fetch and display
- [ ] describe parameter handling
  - all helpers should provide sensible defaults
  - call without parameters should be possible

** instructions

- run ~nomd~

*** configuration

- copy ~check.default~ to ~check.local~ and edit to your needs
- copy ~notify.default~ to ~notify.local~ and edit to your needs
- run ~nomd~

** protocol

*** checks

Checks write one or more lines to stdout in the format

: SEVERITY:CHECK:INFORMATION

where

- SEVERITY :: is one of ~C~ (critical), ~W~ (warning) or ~I~ (informational - quite verbose, also used for debugging)
- CHECK :: is the name of the check that wrote the line
- INFORMATION :: is freetext information about the details of the check

*** notifications

A notification is called with the environment variable
~NOMD_CHECK_RESULTS~ pointing to a file with the complete results of
the preceding checks.  See [[checks]] for the file format description.

** things for thoughts

- configuration
  - simple configurations can be done directly, but what about
    - lists
    - even more complicated things
  - for example diskfree plugin
    - skip some mounts
    - change warning thresholds for others
  - central configuration file?
  - per module configuration file?
- convenience function for writing the protocol lines that
  automatically detects the name of the current check
- switch README from Org to Markdown?
  - Org is cooler, but the Github rendering is slightly sucky
- add a notification that mails the local config/settings?
